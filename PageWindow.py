# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled_draw.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, Qt
from PyQt5.QtCore import QObject, pyqtSlot
from ImageScroller import ImageScroller
from WidgetParams import WidgetParams
from ModelApp import Model
import os


class PageWindow(QtWidgets.QWidget):
    def __init__(self, parent=None, pict_path=None, mainW=None):
        QtWidgets.QWidget.__init__(self, parent)
        self.setObjectName("Page Window")
        self.MainW = mainW
        # self.showMaximized()
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.model = Model()
        self.pict_path = pict_path

        self.active = ImageScroller(self.centralwidget, self.pict_path)
        self.params = WidgetParams(self.centralwidget, 1000, 210)

        self.actions = QtWidgets.QWidget(self.centralwidget)
        self.actions.setGeometry(QtCore.QRect(1000, 700, 450, 170))
        self.formLayout = QtWidgets.QFormLayout(self.actions)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.pushButton = QtWidgets.QPushButton(self.actions)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.pushButton)
        self.pushButton_3 = QtWidgets.QPushButton(self.actions)
        self.pushButton_3.setObjectName("pushButton_3")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.pushButton_3)
        self.pushButton_4 = QtWidgets.QPushButton(self.actions)
        self.pushButton_4.setObjectName("pushButton_4")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.pushButton_4)
        self.pushButton_2 = QtWidgets.QPushButton(self.actions)
        self.pushButton_2.setObjectName("pushButton_2")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.pushButton_2)
        self.pushButton_5 = QtWidgets.QPushButton(self.actions)
        self.pushButton_5.setObjectName("pushButton_5")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.pushButton_5)
        self.pushButton_6 = QtWidgets.QPushButton(self.actions)
        self.pushButton_6.setObjectName("pushButton_6")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.pushButton_6)
        self.pushButton_7 = QtWidgets.QPushButton(self.actions)
        self.pushButton_7.setObjectName("pushButton_7")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.pushButton_7)
        self.pushButton_8 = QtWidgets.QPushButton(self.actions)
        self.pushButton_8.setObjectName("pushButton_8")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.pushButton_8)
        self.pushButton_9 = QtWidgets.QPushButton(self.actions)
        self.pushButton_9.setObjectName("pushButton_9")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.pushButton_9)

        self.centralwidget.setFocusProxy(self.active)
        self.setWindowTitle("Page Window")
        self.pushButton.setText("Искать таблицу")
        self.pushButton_2.setText("Удалить")
        self.pushButton_3.setText("Рисовать")
        self.pushButton_4.setText("Перераспознать")
        self.pushButton_5.setText("Вернуться")
        self.pushButton_6.setText("Следующая")
        self.pushButton_7.setText("Все страницы далее")
        self.pushButton_8.setText("Обрезать")
        self.pushButton_9.setText("Предобработать")

        self.pushButton.clicked.connect(self.detectTableSlot)
        self.pushButton_4.clicked.connect(self.recogTableSlot)
        self.pushButton_2.clicked.connect(self.removeLinesSlot)
        self.pushButton_3.clicked.connect(self.drawLinesSlot)
        self.pushButton_5.clicked.connect(self.goToMain)
        self.pushButton_6.clicked.connect(self.goToNext)
        self.pushButton_7.clicked.connect(self.recogNextToEnd)
        self.pushButton_8.clicked.connect(self.cutImg)
        self.pushButton_9.clicked.connect(self.handleImg)
        QtCore.QMetaObject.connectSlotsByName(self)

    def saveSlot(self):
        self.active.saveImage()

    def setImage(self, pict_path):
        self.pict_path = pict_path
        self.model.setFileName(pict_path)
        self.active.setImage(pict_path)

    def detectTableSlot(self):
        self.model.detect_table(self.pict_path, self.params.params)
        self.active.setLines(self.model.lines_for_drawing())

    def recogTableSlot(self):
        self.model.lines_for_recog(self.active.chosen_points)
        self.model.recog_table(self.pict_path, self.params.params)

    def removeLinesSlot(self):
        self.active.draw_mode = 1

    def drawLinesSlot(self):
        self.active.corners = []
        self.active.draw_mode = 0

    def goToMain(self):
        self.close()
        self.MainW.show()

    def goToNext(self):
        new_numb = int(os.path.splitext(os.path.basename(self.pict_path))[0]) + 1
        new_im = os.path.join(os.path.dirname(self.pict_path),
                              str(new_numb) + os.path.splitext(os.path.basename(self.pict_path))[1])
        if os.path.exists(new_im):
            self.setImage(new_im)

    def recogNextToEnd(self):
        while True:
            old_path = self.pict_path
            self.goToNext()
            if old_path == self.pict_path:
                break
            self.setImage(self.pict_path)
            QtWidgets.qApp.processEvents()
            self.handleImg()
            QtWidgets.qApp.processEvents()
            self.model.detect_table(self.pict_path, self.params.params)
            self.active.setLines(self.model.lines_for_drawing())
            QtWidgets.qApp.processEvents()
            self.model.lines_for_recog(self.active.chosen_points)
            self.model.recog_table(self.pict_path, self.params.params)

    def cutImg(self):
        self.active.chosen_points = []
        self.active.draw_mode = 2

    def handleImg(self):
        self.active.chosen_points = []
        self.active.corners = []
        self.model.handle_img(self.pict_path, self.params.params)
        self.active.setImage(self.pict_path)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    w = PageWindow(pict_path="Pages\\Source\\1.jpg")
    # w.resize(640, 480)
    w.showMaximized()
    sys.exit(app.exec_())
